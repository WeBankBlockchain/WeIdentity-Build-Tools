def gradleVer = "4"
if (gradle.gradleVersion.startsWith("6")
        || gradle.gradleVersion.startsWith("5")
        || gradle.gradleVersion.startsWith("4.10")
        || gradle.gradleVersion.startsWith("4.9")
        || gradle.gradleVersion.startsWith("4.8")
        || gradle.gradleVersion.startsWith("4.7")) {
    println "Gradle with version >= 4.7 detected"
    gradleVer = "5"
} else {
    println "Gradle with version < 4.7 detected"
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = "1.0.7"

// Specify JDK version - may vary in different scenarios
sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
// In this section you declare where to find the dependencies of your project
repositories {
    if (gradle.startParameter.isOffline()) {
        maven {
            url 'dependencies'
        }
    } else {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven { url "https://dl.bintray.com/ethereum/maven/" }
    }
}

List lombok = [
        "org.projectlombok:lombok:1.18.10"
]

List jcommander = [
        "com.beust:jcommander:1.72"
]

List apache_commons = [
        "org.apache.commons:commons-collections4:4.1",
        "org.apache.commons:commons-lang3:3.5",
        "commons-cli:commons-cli:1.3.1",
		"org.apache.logging.log4j:log4j-jcl:2.3"
]

// In this section you declare the dependencies for your production and test code
List jackson = [
        "com.fasterxml.jackson.core:jackson-databind:2.10.0",
        "com.github.fge:json-schema-validator:2.2.6",
        "com.google.zxing:core:3.3.0"
]

configurations {
    localDeps
}

// In this section you declare the dependencies for your production and test code
dependencies {
    localDeps lombok
    if (gradleVer.startsWith("4")) {
        if (gradle.startParameter.isOffline()) {
            compile fileTree(dir: 'dist/lib', include: '*.jar')
        } else {
            compile lombok, apache_commons, jackson, jcommander
			compile("com.webank:weid-java-sdk:1.4.0") {
				exclude group:"org.slf4j", module: "slf4j-log4j12"
            }
        }
    }
    if (gradleVer.startsWith("5")) {
        if (!gradle.startParameter.isOffline()) {
            compileOnly 'org.projectlombok:lombok:1.18.10'
            annotationProcessor 'org.projectlombok:lombok:1.18.10'
            compile apache_commons, jackson, jcommander
			compile("com.webank:weid-java-sdk:1.4.0") {
				exclude group:"org.slf4j", module: "slf4j-log4j12"
            }
        } else {
            compileOnly files('dist/lib/lombok-1.18.10.jar')
            annotationProcessor files('dist/lib/lombok-1.18.10.jar')
            compile fileTree(dir: 'dist/lib', include: '*.jar')
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

jar {
    destinationDir file('dist/app')
    archiveName project.name + '-' + version + '.jar'

    exclude '**/*.xml'
    exclude '**/*.properties'

    doLast {
        def f = new File('dist/lib/NotoSansCJKtc-Regular.ttf')
        if (f.exists() && f.size() > 100) {
            println "Font file already exists, distributing.."
            copy {
                from file('dist/lib/NotoSansCJKtc-Regular.ttf')
                into 'resources/'
            }
        }
     	copy {
            from file('resources/')
            into 'dist/conf'
        }
        if (!gradle.startParameter.isOffline()) {
            if (!f.exists() || (f.exists() && f.size() < 100)) {
                println "Font file does not exist, starting to download and distribute.."
                new URL('https://github.com/WeBankFinTech/WeIdentity/blob/master/dist/lib/NotoSansCJKtc-Regular.ttf').withInputStream { i ->
                    f.withOutputStream {
                        it << i
                    }
                }
                copy {
                    from file('dist/lib/NotoSansCJKtc-Regular.ttf')
                    into 'resources/'
                }
            }
            copy {
                from configurations.runtime
                from configurations.localDeps
                into 'dist/lib'
            }
        }
    }
}
